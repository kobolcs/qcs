spring:
  application:
    name: order-service

  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: order_group
      auto-offset-reset: earliest
      enable-auto-commit: false  # Manual acknowledgment
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.eventdriven.order.model
        session.timeout.ms: 30000
        max.poll.interval.ms: 300000
        max.poll.records: 10
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      compression-type: snappy
      properties:
        linger.ms: 100
        batch.size: 16384
    listener:
      ack-mode: manual  # Enable manual acknowledgment
      concurrency: 3    # Process 3 partitions concurrently
      missing-topics-fatal: false

  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}
      timeout: ${REDIS_TIMEOUT:5000}
      connect-timeout: ${REDIS_CONNECT_TIMEOUT:2000}
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 2
          max-wait: -1ms

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,circuitbreakers
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      redis-cb:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50
        event-consumer-buffer-size: 10
        record-exceptions:
          - redis.clients.jedis.exceptions.JedisConnectionException
          - org.springframework.dao.DataAccessException
        ignore-exceptions:
          - com.eventdriven.order.kafka.OrderEventConsumer.NonRetryableException

  retry:
    instances:
      redis-retry:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - redis.clients.jedis.exceptions.JedisConnectionException
          - org.springframework.dao.DataAccessException
        ignore-exceptions:
          - com.eventdriven.order.kafka.OrderEventConsumer.NonRetryableException

# Logging Configuration
logging:
  level:
    com.eventdriven: ${LOG_LEVEL:DEBUG}
    org.springframework.kafka: INFO
    org.testcontainers: INFO
    io.github.resilience4j: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"