name: SpaceX Suite CI with Allure and Quality Gates

on:
  push:
  pull_request:
  schedule:
    - cron: '0 4 * * *' # 04:00 UTC
  workflow_dispatch:

env:
  TESTS_DIR: robot-framework-python-tests
  ALLURE_RESULTS: allure-results
  ALLURE_REPORT: allure-report

jobs:
  lint-and-quality:
    name: Lint & Quality Gate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('${{ env.TESTS_DIR }}/requirements*.txt') }}

      - name: Install dependencies (composite action)
        uses: ./.github/actions/install-python-deps
        with:
          python-version: "3.11"
          tests-dir: ${{ env.TESTS_DIR }}

      - name: Run Robocop Lint
        working-directory: ${{ env.TESTS_DIR }}
        run: robocop .

      - name: Check formatting with Black
        working-directory: ${{ env.TESTS_DIR }}
        run: black --check .

  api-tests:
    name: "Test: API Suite"
    runs-on: ubuntu-latest
    needs: lint-and-quality
    env:
      # Add API secrets here if needed for authentication
      API_TOKEN: ${{ secrets.API_TOKEN }}
      API_USERNAME: ${{ secrets.API_USERNAME }}
      API_PASSWORD: ${{ secrets.API_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('${{ env.TESTS_DIR }}/requirements*.txt') }}

      - name: Install dependencies (composite action)
        uses: ./.github/actions/install-python-deps
        with:
          python-version: "3.11"
          tests-dir: ${{ env.TESTS_DIR }}

      - name: Run API tests with Allure
        working-directory: ${{ env.TESTS_DIR }}
        run: |
          pabot --processes 4 \
            --listener allure_robotframework \
            --alluredir ${{ env.ALLURE_RESULTS }} \
            --outputdir reports/api_pabot \
            tests/api_tests

      - name: Debug: Print HTTP error responses (if any)
        if: failure()
        run: |
          echo "If you see HTTP 418 or other errors, check that API credentials are set as GitHub secrets."
          if [ -z "${{ secrets.API_TOKEN }}" ]; then echo "API_TOKEN is not set"; else echo "API_TOKEN is set"; fi
          if [ -z "${{ secrets.API_USERNAME }}" ]; then echo "API_USERNAME is not set"; else echo "API_USERNAME is set"; fi
          if [ -z "${{ secrets.API_PASSWORD }}" ]; then echo "API_PASSWORD is not set"; else echo "API_PASSWORD is set"; fi

      - name: Upload API test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-pabot-report
          path: ${{ env.TESTS_DIR }}/reports/api_pabot

  gui-visual-tests:
    name: "Test: GUI & Visual Suite"
    runs-on: ubuntu-latest
    needs: lint-and-quality
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('${{ env.TESTS_DIR }}/requirements*.txt') }}

      - name: Install dependencies (composite action)
        uses: ./.github/actions/install-python-deps
        with:
          python-version: "3.11"
          tests-dir: ${{ env.TESTS_DIR }}

      - name: Run GUI & Visual tests with Allure
        working-directory: ${{ env.TESTS_DIR }}
        run: |
          robot --listener allure_robotframework \
            --alluredir ${{ env.ALLURE_RESULTS }} \
            --outputdir reports/gui_visual_results \
            tests/gui_tests tests/visual_tests

      - name: Upload GUI & Visual test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gui-visual-report
          path: ${{ env.TESTS_DIR }}/reports/gui_visual_results

  unit-tests:
    name: "Test: Pytest Unit Suite"
    runs-on: ubuntu-latest
    needs: lint-and-quality
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('${{ env.TESTS_DIR }}/requirements*.txt') }}

      - name: Install dependencies (composite action)
        uses: ./.github/actions/install-python-deps
        with:
          python-version: "3.11"
          tests-dir: ${{ env.TESTS_DIR }}

      - name: Run Pytest unit tests with Allure
        working-directory: ${{ env.TESTS_DIR }}
        run: pytest --alluredir=${{ env.ALLURE_RESULTS }} pytest_unit

      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-unit-report
          path: ${{ env.TESTS_DIR }}/pytest_unit

  generate-allure-report:
    name: "Reporting: Allure Merge & Upload"
    runs-on: ubuntu-latest
    needs: [api-tests, gui-visual-tests, unit-tests]
    if: github.event_name != 'pull_request' # Only generate Allure report for push/schedule/manual
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: ${{ env.TESTS_DIR }}

      - name: Generate Allure Report
        uses: allure-framework/allure-action@v3
        with:
          report_path: ${{ env.TESTS_DIR }}/${{ env.ALLURE_REPORT }}
          results_path: ${{ env.TESTS_DIR }}/${{ env.ALLURE_RESULTS }}
      - name: Allure Report Download Instructions
        run: |
          echo "Allure report cannot be viewed directly on GitHub."
          echo "Download the '${{ env.ALLURE_REPORT }}' artifact from the Actions run and view it locally with:"
          echo "allure open <downloaded-report-directory>"
      - name: Upload Allure Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ALLURE_REPORT }}
          path: ${{ env.TESTS_DIR }}/${{ env.ALLURE_REPORT }}